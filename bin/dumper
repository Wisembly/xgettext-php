#!/usr/bin/env php
<?php

foreach (array(__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php') as $file) {
    if (file_exists($file)) {
        define('JSGETTEXT_COMPOSER_INSTALL', $file);
        break;
    }
}

if (!defined('JSGETTEXT_COMPOSER_INSTALL')) {
    die(
        'You need to set up the project dependencies using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

set_time_limit(0);

require_once JSGETTEXT_COMPOSER_INSTALL;

use \Exception;

use Xgettext\Dumper\CsvDumper,
    Xgettext\Dumper\JsonDumper,
    Xgettext\Parser\PoeditParser;

$options = array(
    '-i' => null,
    '-o' => null,
);

$i = 1;
while ($i < count($argv)) {
    if (preg_match('#^-[a-z]$#i', $argv[$i])) {
        $options[$argv[$i]] = isset($argv[$i+1]) ? trim($argv[$i+1]) : true;
        $i += 2;
    }
}

try {
    if (preg_match('/json$/i', $options['-o'])) {
        $dumper = new JsonDumper($options['-o']);
    } else if (preg_match('/csv$/i', $options['-o'])) {
        $dumper = new CsvDumper($options['-o']);
    } else {
        throw new Exception("Output format not supported", 1);
    }

    $parser = new PoeditParser($options['-i']);

    $dumper->dump($parser->parse());
} catch (Exception $e) {
    fwrite(STDOUT, $e->getMessage() . <<<EOT


Usage php dumper -o [OUTPUT] -f [FORMAT] [FILE]

    -i [INPUT]
        specify the .po input file where the keys are translated
        eg: ../../file.po
    -o [OUTPUT]
        specify the output file where the keys will be dumped
        eg: ../../file.json
    -f [FORMAT]
        specify the format you'd like to dump your translations
        eg: json
    [FILES]
        source file destination file
        eg: source.po destination.json


EOT
        );
}
